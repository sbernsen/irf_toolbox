axis(3)
mtext("Distance From Source (m)", side = 3, padj = -4)
max(psd)
min(psd)
source('~/seismic/impulse_response_toolbox/plot_egf.R')
zmax
zmin
source('~/seismic/impulse_response_toolbox/plot_egf.R')
colorbar( clut = Col(tim.colors(100) ),
x.range = c(-50, 100), y.range= c(1800, 1600),
values = c(-5,5) )
source('~/seismic/impulse_response_toolbox/plot_egf.R')
source('~/seismic/impulse_response_toolbox/plot_egf.R')
color.legend(200,0,220,100,legend=c("min","max"),
rect.col=c("darkviolet","deepskyblue4","green","yellow","red"))
library(plotrix)
color.legend(200,0,220,100,legend=c("min","max"),
rect.col=c("darkviolet","deepskyblue4","green","yellow","red"))
source('~/seismic/impulse_response_toolbox/plot_egf.R')
-110 + 150
color.legend(-40,1500,40,1600,legend=c("min","max"),
rect.col=tim.colors(100) )
210-150
color.legend(-40,1600,60,1700,legend=c("min","max"),
rect.col=tim.colors(100) )
dim(psd)
X[6]
X[7]
X[25]
color.legend(-40,1600,120,1700,legend=c("min","max"),
rect.col=tim.colors(100) )
source('~/seismic/impulse_response_toolbox/plot_egf.R')
?color.legend
color.legend(-40,1600,120,1700, col.labels,
rect.col=tim.colors(100) )
col.labels <- c(zmin, zmid, zmax)
source('~/seismic/impulse_response_toolbox/plot_egf.R')
source('~/seismic/impulse_response_toolbox/plot_egf.R')
zmid
source('~/seismic/impulse_response_toolbox/plot_egf.R')
source('~/seismic/impulse_response_toolbox/plot_egf.R')
#!/usr/bin/RScript
library(RSEIS)
library(fields)
library(oce)
# Load stations pairs textfile
stp <- read.delim("station_pairs.txt", header = F, sep = "\t")
# Load the EGFs, assign the time vector and remove it from the data
egf <- read.csv("EmpiricalGreensFunctions.csv", header = F)
t_int <- egf[,1]
egf <- egf[,-1]
# Load corresponding spectral data, assign the frequency vector and remove it
# from the data
psd <- read.csv("EGFspectrum.csv", header = F)
frq <- psd[,1]
psd <- psd[,-1]
# Sort the data based on their positions
ind_sort <- sort( stp[,3], index.return = T)$ix
stp <- stp[ind_sort,]
egf <- egf[,ind_sort]
psd <- psd[,ind_sort]
# Get the locations. We may need to average duplicates
locs <- stp[,3]
lid <- unique(locs)
n <- length(lid)
# Check for duplicates
stack_arr <- 0
rm_ind <- 0
for(i in 1:n)
{
L <- locs == lid[i]
if( sum(L) > 1 )
{
stack_arr <- c(stack_arr, lid[i])
}
}
if(length(stack_arr) > 1)
{
for( i in 2:length(stack_arr) )
{
ind <- which(locs == stack_arr[i])
egf_tmp <- egf[,ind ]
# align and stack to the first egf
for(j in 2:( dim(egf_tmp)[2]) )
{
z <- xcor2(egf_tmp[,1], egf_tmp[,j], DT = 1, LAG = 100, PLOT = T)
# shift the second timeseries in the cross correlation
if(z$mlag2 < 0)
{
tmp <- egf_tmp[,j]
tmp <- c(tmp[-1:z$mlag2], rep(0, abs(z$mlag2) ) )
egf_tmp[,j] <- tmp
}else if(z$mlag2 > 0)
{
tmp <- egf_tmp[,j]
tmp <- c(rep(0, abs(z$mlag2) ), tmp[1:(length(tmp) - z$mlag2)]  )
egf_tmp[,j] <- tmp
}else
{
next
}
}
egf[,ind[1] ] <- apply(egf_tmp, 1, mean)
rm_ind <- c( rm_ind, ind[2:length(ind)])
}
}
if(length(rm_ind) > 1)
{
rm_ind <- rm_ind[-1]
egf <- egf[,-rm_ind]
psd <- psd[,-rm_ind]
stp <- stp[-rm_ind,]
}
X <- stp[,4]
# normalize the psd by the first reciever for each line
mean(psd)
mean(psd, na.rm = T)
?mean
median(psd)
psd
class(psd)
mean(as.matrix(psd) )
source('~/seismic/impulse_response_toolbox/plot_egf.R')
115+180
295/2
115-295
115/295
source('~/seismic/impulse_response_toolbox/plot_egf.R')
color.legend
?color.legend
color.legend(-40,1600,120,1700, col.labels,
rect.col=tim.colors(100), align = "rb" )
color.legend(-40,1600,120,1700, col.labels,
rect.col=tim.colors(100), align = "ra" )
color.legend(-40,1600,120,1700,
rect.col=tim.colors(100), align = "ra" )
source('~/seismic/impulse_response_toolbox/plot_egf.R')
mtext("Gain (dB)", side = 1, padj = -10)
mtext("Gain (dB)", side = 1, padj = 2)
mtext("Gain (dB)", side = 1, padj = 4)
mtext("Gain (dB)", side = 1, padj = 5)
mtext("Gain (dB)", side = 1, padj = 7)
mtext("Gain (dB)", side = 1, padj = 6)
source('~/seismic/impulse_response_toolbox/plot_egf.R')
color.legend(-40,1600,120,1700, rect.col=tim.colors(100))
source('~/seismic/impulse_response_toolbox/plot_egf.R')
source('~/seismic/impulse_response_toolbox/plot_egf.R')
color.legend(-40,1550,120,1600, c(""), rect.col=tim.colors(100))
source('~/seismic/impulse_response_toolbox/plot_egf.R')
?mtext
mtext("Gain (dB)", side = 1, padj = 5.5)
mtext("Gain (dB)", side = 1, padj = 4.5)
??xtick.minor
?tick.minor
??minor.tick
source('~/seismic/impulse_response_toolbox/plot_egf.R')
col.labels <- c(min(psd) , max(psd) )
col.labels
#!/usr/bin/RScript
library(RSEIS)
library(fields)
library(oce)
library(Hmisc)
# Load stations pairs textfile
stp <- read.delim("station_pairs.txt", header = F, sep = "\t")
# Load the EGFs, assign the time vector and remove it from the data
egf <- read.csv("EmpiricalGreensFunctions.csv", header = F)
t_int <- egf[,1]
egf <- egf[,-1]
# Load corresponding spectral data, assign the frequency vector and remove it
# from the data
psd <- read.csv("EGFspectrum.csv", header = F)
frq <- psd[,1]
psd <- psd[,-1]
# Sort the data based on their positions
ind_sort <- sort( stp[,3], index.return = T)$ix
stp <- stp[ind_sort,]
egf <- egf[,ind_sort]
psd <- psd[,ind_sort]
# Get the locations. We may need to average duplicates
locs <- stp[,3]
lid <- unique(locs)
n <- length(lid)
# Check for duplicates
stack_arr <- 0
rm_ind <- 0
for(i in 1:n)
{
L <- locs == lid[i]
if( sum(L) > 1 )
{
stack_arr <- c(stack_arr, lid[i])
}
}
if(length(stack_arr) > 1)
{
for( i in 2:length(stack_arr) )
{
ind <- which(locs == stack_arr[i])
egf_tmp <- egf[,ind ]
# align and stack to the first egf
for(j in 2:( dim(egf_tmp)[2]) )
{
z <- xcor2(egf_tmp[,1], egf_tmp[,j], DT = 1, LAG = 100, PLOT = T)
# shift the second timeseries in the cross correlation
if(z$mlag2 < 0)
{
tmp <- egf_tmp[,j]
tmp <- c(tmp[-1:z$mlag2], rep(0, abs(z$mlag2) ) )
egf_tmp[,j] <- tmp
}else if(z$mlag2 > 0)
{
tmp <- egf_tmp[,j]
tmp <- c(rep(0, abs(z$mlag2) ), tmp[1:(length(tmp) - z$mlag2)]  )
egf_tmp[,j] <- tmp
}else
{
next
}
}
egf[,ind[1] ] <- apply(egf_tmp, 1, mean)
rm_ind <- c( rm_ind, ind[2:length(ind)])
}
}
if(length(rm_ind) > 1)
{
rm_ind <- rm_ind[-1]
egf <- egf[,-rm_ind]
psd <- psd[,-rm_ind]
stp <- stp[-rm_ind,]
}
X <- stp[,4]
# normalize the psd by the first reciever for each line
norm_factor <- max(psd[,11])/max(psd[12])
zmax <- ceiling(max(psd[1:770,]))
zmin <- floor(min(psd[1:770,]))
psd[,1:11] = psd[,1:11]/(norm_factor*max(psd[,11]))
psd[,12:32] = psd[,12:32]/max(psd[,12])
dev.new()
psd <- psd[1:770,]
frq <- frq[1:770]
log_frq <- c(0, log10(frq[2:length(frq)]) )
ylims <- c(max(log_frq), min(log_frq) )
image(X,frq, t(as.matrix(psd)) ,col = tim.colors(100) , xaxt = "n", xlab = "",
ylab = "Frequency (Hz)", ylim = c(max(frq), min(frq) ) )
lines(rep(0, length(frq) ), frq)
lines(rep(110, length(frq)), frq)
lines(c(-140,X,220), rep(450, length(X)+2 ) )
axis(3)
mtext("Distance From Source (m)", side = 3, padj = -4)
col.labels <- c(zmin,zmax)
color.legend(-40,1550,120,1600, c(""), rect.col=tim.colors(100))
mtext("Gain (dB)", side = 1, padj = 4.5)
# col = colorRampPalette(c("blue","orange", "red4"))( (100) )
minor.tick(nx = 5)
# col = colorRampPalette(c("blue","orange", "red4"))( (100) )
minor.tick(nx = 5, x.args = list(side = 3) )
?axis
# col = colorRampPalette(c("blue","orange", "red4"))( (100) )
axis(3, at = seq(-110, 210, by = 10), lwd = 0.5)
# col = colorRampPalette(c("blue","orange", "red4"))( (100) )
axis(3, at = seq(-110, 210, by = 10), lwd.ticks = 0.5, labels = F)
image(X,frq, t(as.matrix(psd)) ,col = tim.colors(100) , xaxt = "n", xlab = "",
ylab = "Frequency (Hz)", ylim = c(max(frq), min(frq) ) )
lines(rep(0, length(frq) ), frq)
lines(rep(110, length(frq)), frq)
#lines(c(-140,X,220), rep(450, length(X)+2 ) )
axis(3)
mtext("Distance From Source (m)", side = 3, padj = -4)
col.labels <- c(zmin,zmax)
color.legend(-40,1550,120,1600, c(""), rect.col=tim.colors(100))
mtext("Gain (dB)", side = 1, padj = 4.5)
mtext(, side = 1, padj = 2)
# col = colorRampPalette(c("blue","orange", "red4"))( (100) )
axis(3, at = seq(-110, 210, by = 10), lwd.ticks = 0.5, labels = F)
zmin
zmax
mtext(zmin, side = 1, padj = 2)
mtext(zmin, side = 1, padj = 1.75)
mtext(zmin, side = 1, padj = 2.5)
?mtext
mtext(zmin, side = 1, padj = 2.5, adj = 0.1)
mtext(zmin, side = 1, padj = 2.5, adj = 0.25)
mtext(zmin, side = 1, padj = 2.5, adj = 0.2)
mtext(zmin, side = 1, padj = 2.6, adj = 0.2)
mtext(zmax, side = 1, padj = 2.6, adj = 0.4)
mtext(zmax, side = 1, padj = 2.6, adj = 0.6)
mtext(zmax, side = 1, padj = 2.6, adj = 0.8)
mtext(zmax, side = 1, padj = 2.6, adj = 0.7)
mtext(zmax, side = 1, padj = 2.6, adj = 0.725)
source('~/seismic/impulse_response_toolbox/plot_egf.R')
source('~/seismic/impulse_response_toolbox/plot_egf.R')
color.legend(-20,1550,120,1600, c(""), rect.col=tim.colors(100))
source('~/seismic/impulse_response_toolbox/plot_egf.R')
mtext(zmin, side = 1, padj = 2.6, adj = 0.275)
source('~/seismic/impulse_response_toolbox/plot_egf.R')
###############################################################################
##                              Plot the EGF's                               ##
###############################################################################
dev.new()
ylims <- c(min(X), max(X) )
par(oma = c(0.1, 0.1, 0.1, 0.1) )
ylims <- c(max(X), min(X) )
plot(egf[,1], X, ylim = ylims)
length(X0)
length(X)
dim(X)
ylims <- c(max(t_int), min(t_int) )
plot(egf[,1], t_int, ylim = ylims)
###############################################################################
##                              Plot the EGF's                               ##
###############################################################################
dev.new()
ylims <- c(max(t_int), min(t_int) )
plot(egf[,1], t_int, ylim = ylims, type = "l")
?polygon
?reverse
??reverse
?rev
poly_t <- c(t_int, rev(t_int) )
plot(egf[,1], t_int, ylim = ylims, type = "l")
y <- c(egf[,1], rev(egf[,1]) )
pm_polygon_fill <- function(x, y)
{
poly_x <- c(x, rev(x) )
poly_y <- c(y, rev(y) )
pos_fill <- cbind(x, y)
neg_fill <- cbind(x, y)
ind <- which(poly_y >= 0)
pos_fill <- pos_fill[ind,]
neg_fill <- neg_fill[-ind,]
polygon(pos_fill[,2], pos_fill[,1], col = "gray4")
polygon(neg_fill[,2], neg_fill[,1], col = "red")
}
ylims <- c(max(t_int), min(t_int) )
pm_polygon_fill(t_int, egf[,1])
x <- t_int
y <- egf[,1]
length(x)
length(y)
poly_x <- c(x, rev(x) )
poly_y <- c(y, rep(0, length(y) ) )
plot(poly_x, poly_y)
pos_fill <- cbind(x, y)
neg_fill <- cbind(x, y)
ind <- which(poly_y >= 0)
ind
ind <- which(y >= 0)
ind
ind <- which(y >= 0)
pos_x <- c(x[ind], rev(x[ind]) )
pos_y <- c(y[ind], rep(0, length(ind) ) )
pos_fill <- pos_fill[ind,]
neg_fill <- neg_fill[-ind,]
polygon(pos_y, pos_x
polygon(pos_y, pos_x, col = "gray4")
polygon(pos_y, pos_x, col = "gray4")
###############################################################################
##                              Plot the EGF's                               ##
###############################################################################
dev.new()
plot(egf[,1], t_int, ylim = ylims, type = "l")
polygon(pos_y, pos_x, col = "gray4")
neg_x <- c(x[-ind], rev(x[-ind]) )
neg_y <- c(y[-ind], rep(0, length(y[-ind]) ) )
polygon(neg_y, neg_x, col = "red")
?par
dev.new()
par(mfrow = c(1, length(X) ), mai = c(0.1, 0.1, 0.1, 0.1) )
plot(egf[,1], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n")
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.1, 0.1, 0.1, 0.1) )
plot(egf[,1], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n")
plot(egf[,1], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,1])
length(egf[,1])
pm_polygon_fill <- function(x, y, line_fill)
{
ind <- which(y >= 0)
pos_x <- c(x[ind], rev(x[ind]) )
pos_y <- c(y[ind], rep(0, length(ind) ) )
neg_x <- c(x[-ind], rev(x[-ind]) )
neg_y <- c(y[-ind], rep(0, length(y[-ind]) ) )
polygon(pos_y, pos_x, col = line_fill[1])
polygon(neg_y, neg_x, col = line_fill[2])
}
pm_polygon_fill(t_int, egf[,1])
pm_polygon_fill(t_int, egf[,1], line_fill)
<
line_fill <- c("red4", "blue4")
pm_polygon_fill(t_int, egf[,1], line_fill)
line_fill <- c("red4", "blue")
pm_polygon_fill(t_int, egf[,1], line_fill)
line_fill <- c("red4", "yellow")
pm_polygon_fill(t_int, egf[,1], line_fill)
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.1, 0.1, 0.1, 0.1) )
for(i in 1:length(x) )
{
plot(egf[,1], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,1], line_fill)
}
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.1, 0.1, 0.1, 0.1) )
for(i in 1:length(X) )
{
plot(egf[,1], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,1], line_fill)
}
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.1, 0.1, 0.1, 0.1) )
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
par(mfrow = c(1, length(X) ), mar = c(0.1, 0.1, 0.1, 0.1), oma = c(0.1, 0.1, 0.1, 0.1) ) )
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.25, 0.0, 0.25, 0.0), oma = c(0.1, 0.1, 0.1, 0.1) ) )
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.25, 0.0, 0.25, 0.0), oma = c(0.1, 0.1, 0.1, 0.1) ) )
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
X
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.25, 0.0, 0.25, 0.0) )
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.25, 0.0, 0.25, 0.0) )
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.25, -0.10, 0.25, -0.10) )
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.25, 0.0, 0.25, 0.0), mai = c(0.25, 1, 1, 0.25)  )
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
par(mfrow = c(1, length(X) ), mar = c(0.25, 0.10, 0.25, 0.0), mai = c(0.25, 1, 1, 0.25)  )
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.25, 0.10, 0.25, 0.0), mai = c(0, 0, 0, 0)  )
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
# define a few plotting parameters
ylims <- c(max(t_int), min(t_int) )
line_fill <- c("red4", "yellow")
dev.new()
par(mfrow = c(1, length(X) ), mar = c(0.25, 0.10, 0.25, 0.0), mai = c(0, 0, 0, 0)  )
for(i in 1:length(X) )
{
plot(egf[,i], t_int, ylim = ylims, type = "l",bg = "transparent",
xaxt = "n", yaxt = "n", bty = "n")
pm_polygon_fill(t_int, egf[,i], line_fill)
}
